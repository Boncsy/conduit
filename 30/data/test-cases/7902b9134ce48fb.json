{"uid":"7902b9134ce48fb","name":"test_accept_cookies","fullName":"test_conduit_vizsgaremek.test_conduit_vizsgaremek.TestConduit#test_accept_cookies","historyId":"d7b437e36fa8781b8ed2dd5441874458","time":{"start":1680597714526,"stop":1680597724790,"duration":10264},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit_vizsgaremek.TestConduit object at 0x7fef51a57ca0>\n\n    def test_accept_cookies(self):\n        accept_button = self.browser.find_element(By.XPATH, '//button[@class=\"cookie__bar__buttons__button cookie__bar__buttons__button--accept\"]')\n        accept_button.click()\n>       decline_button_list = WebDriverWait(self.browser, 10).until(EC.presence_of_all_elements_located((By.XPATH, '//button[@class=\"cookie__bar__buttons__button cookie__bar__buttons__button--decline\"]')))\n\ntest_conduit_vizsgaremek/test_conduit_vizsgaremek.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"abffaaa1d0216df2b23ef6a7bb88b2b6\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7fef51b06b90>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1680597712139,"stop":1680597714525,"duration":2386},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit_vizsgaremek.TestConduit object at 0x7fef51a57ca0>\n\n    def test_accept_cookies(self):\n        accept_button = self.browser.find_element(By.XPATH, '//button[@class=\"cookie__bar__buttons__button cookie__bar__buttons__button--accept\"]')\n        accept_button.click()\n>       decline_button_list = WebDriverWait(self.browser, 10).until(EC.presence_of_all_elements_located((By.XPATH, '//button[@class=\"cookie__bar__buttons__button cookie__bar__buttons__button--decline\"]')))\n\ntest_conduit_vizsgaremek/test_conduit_vizsgaremek.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"abffaaa1d0216df2b23ef6a7bb88b2b6\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7fef51b06b90>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","steps":[],"attachments":[{"uid":"c9dac0e1690c2c8a","name":"stderr","source":"c9dac0e1690c2c8a.txt","type":"text/plain","size":159}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1680597724846,"stop":1680597724905,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test_conduit_vizsgaremek"},{"name":"suite","value":"test_conduit_vizsgaremek"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az255-849"},{"name":"thread","value":"3032-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_conduit_vizsgaremek.test_conduit_vizsgaremek"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7902b9134ce48fb.json","parameterValues":[]}